name: QMake Build Matrix

on: [push]

env:
  QT_VERSION: 5.14.0

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
        version: ['5.15.2']
    steps:
    - uses: actions/checkout@v1

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.version }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtwebengine'
        tools: 'tools_openssl_x64,1.1.1-10,qt.tools.openssl.win_x64'

    - name: Download exiv2
      if: startsWith(matrix.os, 'windows')
      run: |
        curl https://www.exiv2.org/builds/exiv2-0.27.3-2019msvc64.zip --output exiv2-0.27.3-2019msvc64.zip
        7z x exiv2-0.27.3-2019msvc64.zip -oc:/

      shell: cmd


    - name: Configure test project on windows
      if: startsWith(matrix.os, 'windows')
      run: |
        call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        mkdir build
        cd build
        cmake -DCMAKE_PREFIX_PATH="C:\Qt\5.15.2\msvc2019_64" -Dexiv2_DIR="C:\exiv2-0.27.3-2019msvc64\lib\cmake\exiv2" -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_BUILD_TYPE=RELEASE -DDEPLOY_QT_LIBRARIES=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
        cmake --build . --config Release
        ctest -C Release .
        cp *.qm ./Release
        find /c/Qt/Tools/OpenSSL -type f -name '*.dll' -print -exec cp {} ./Release \;
        find /c/exiv2-0.27.3-2019msvc64 -type f -name '*.dll' -print -exec cp {} ./Release \;
        7z a -tzip com.github.jmlich.geotagging.zip -r *
      shell: cmd

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: action-${{ env.GITHUB_RUN_ID }}-${{ env.GITHUB_SHA }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./build/com.github.jmlich.geotagging.zip
        asset_name: com.github.jmlich.geotagging.zip
        asset_content_type: application/zip